% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/increase_order_complete_search.R
\name{increase_order_complete_search}
\alias{increase_order_complete_search}
\title{Determine the (k+1)'th order t-cherry tree from a k'th order t-cherry
tree with the greatest weight.}
\usage{
increase_order_complete_search(tch_cliq, data, ...)
}
\arguments{
\item{tch_cliq}{A list with the cliques of a k'th order t-cherry tree.}

\item{data}{The data the structure should be based on.}

\item{...}{Additional arguments passed to \code{weight_junction_tree}.}
}
\value{
A list containing the following components:
\itemize{
\item \code{model} A list with the following components:
\itemize{
\item \code{weight} The weight of the final k'th order t-cherry tree.
\item \code{cliques} A list containing the cliques (cherries) of
 the k'th order t-cherry tree.
\item \code{separators} A list containing the separators of a
junction tree for the k'th order t-cherry tree.
\item \code{adj_matrix} The adjacency matrix for the k'th order
t-cherry tree.
}
\item \code{n_models} The number of considered models.
}
}
\description{
Determine the structure of the (k + 1)'th order t-cherry
tree from a k'th order t-cherry tree with the greatest weight based
on a complete search.
}
\details{
The algorithm for constructing the (k+1)'th order t-cherry tree from
a k'th order t-cherry tree is based on an atempt to minimize the
Kullback-Leibler divergence, by mazimising the weight. All possible
structures are determined and the one with the highest weight is
chosen.

Note that this procedure is highly inefficient, and only suited for
small problems.
}
\examples{
set.seed(43)
var1 <- c(sample(c(1, 2), 100, replace = TRUE))
var2 <- var1 + c(sample(c(1, 2), 100, replace = TRUE))
var3 <- var1 + c(sample(c(0, 1), 100, replace = TRUE,
                        prob = c(0.9, 0.1)))
var4 <- c(sample(c(1, 2), 100, replace = TRUE))
var5 <- var2 + var3
var6 <- var1 - var4 + c(sample(c(1, 2), 100, replace = TRUE))
var7 <- c(sample(c(1, 2), 100, replace = TRUE))

data <- data.frame("var1" = as.character(var1),
                   "var2" = as.character(var2),
                   "var3" = as.character(var3),
                   "var4" = as.character(var4),
                   "var5" = as.character(var5),
                   "var6" = as.character(var6),
                   "var7" = as.character(var7))

ChowLiu_cliques <- list(c("var1", "var5"),
                        c("var2", "var5"),
                        c("var3", "var5"),
                        c("var3", "var7"),
                        c("var4", "var6"),
                        c("var5", "var6"))

(tch <- increase_order_complete_search(ChowLiu_cliques, data,
                                       smooth = 0.1))
# For plotting
library(gRbase)
library(Rgraphviz)
tcherry_tree <- as(tch$model$adj_matrix, "graphNEL")
plot(tcherry_tree)

# For probability propagation
library(gRain)
model <- grain(tcherry_tree, data = data, smooth = 0.1)
querygrain(model)
}
\seealso{
\code{\link{weight_junction_tree}} for calculation of the
weight and \code{\link{increase_order2}} for a more
efficient but greedy algorithm.
}
\author{
Katrine Kirkeby, \email{enir_tak@hotmail.com}

Maria Knudsen, \email{mariaknudsen@hotmail.dk}

Ninna Vihrs, \email{ninnavihrs@hotmail.dk}
}
