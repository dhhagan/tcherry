% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tcherry_order_increase.R
\name{tcherry_order_increase}
\alias{tcherry_order_increase}
\title{Determine a (k+1)'th order t-cherry tree from a k'th order t-cherry
tree}
\usage{
tcherry_order_increase(tch_cliq, data, ...)
}
\arguments{
\item{tch_cliq}{A list with the cliques of the k'th order t-cherry
tree.}

\item{data}{The data the tree structure should be based on.}

\item{...}{Additional arguments passed to \code{MIk}.}
}
\value{
A list containing the following components:
\itemize{
\item \code{adj_matrix} The adjacency matrix for the (k+1)'th order
t-cherry tree.
\item \code{cliques} A list containing the cliques (cherries) of
 the (k+1)'th order t-cherry tree.
\item \code{separators} A list containing the separators of a
junction tree for the (k+1)'th order t-cherry tree.
}
}
\description{
Determine the structure of a (k+1)'th order t-cherry tree
from a k'th order t-cherry tree for data.
}
\details{
The algorithm for constructing the (k+1)'th order t-cherry
tree from a k'th order t-cherry tree is a greedy algorithm in the
sence that it always attempts to use the k variables with highest
mutual information as the next cherry. The procedure is as follows:
\itemize{
\item Starting from the k'th order t-cherry tree make a complete set
of the (k+1) variables with highest mutual information which satisfies
that this only adds one edge to the original graph. Remove these (k+1)
variables from later consideration.
\item Make a complete set of the (k+1) variables with highest mutual
information which satisfies that this only adds one edge to the graph
and that k of the variables are in earlier created cliques of size
(k+1). Remove these (k+1) variables from later consideration.
\item Continue until all variables are in a clique of size (k+1).
}
}
\examples{
set.seed(43)
var1 <- c(sample(c(1, 2), 100, replace = TRUE))
var2 <- var1 + c(sample(c(1, 2), 100, replace = TRUE))
var3 <- var1 + c(sample(c(0, 1), 100, replace = TRUE,
                        prob = c(0.9, 0.1)))
var4 <- c(sample(c(1, 2), 100, replace = TRUE))
var5 <- var2 + var3
var6 <- var1 - var4 + c(sample(c(1, 2), 100, replace = TRUE))
var7 <- c(sample(c(1, 2), 100, replace = TRUE))

data <- data.frame("var1" = as.character(var1),
                   "var2" = as.character(var2),
                   "var3" = as.character(var3),
                   "var4" = as.character(var4),
                   "var5" = as.character(var5),
                   "var6" = as.character(var6),
                   "var7" = as.character(var7))

ChowLiu_cliques <- list(c("var1", "var5"),
                        c("var2", "var5"),
                        c("var3", "var5"),
                        c("var3", "var7"),
                        c("var4", "var6"),
                        c("var5", "var6"))
# smooth used in MIk
(tch <- tcherry_order_increase(ChowLiu_cliques, data, smooth = 0.1))

# For plotting
library(gRbase)
library(Rgraphviz)
tcherry_tree <- as(tch$adj_matrix, "graphNEL")
plot(tcherry_tree)

# For probability propagation
library(gRain)
model <- grain(tcherry_tree, data = data, smooth = 0.1)
querygrain(model)
}
\seealso{
\code{\link{MIk}} for mutual information of k variables.
}
\author{
Katrine Kirkeby, \email{enir_tak@hotmail.com}

Maria Knudsen, \email{mariaknudsen@hotmail.dk}

Ninna Vihrs, \email{ninnavihrs@hotmail.dk}
}
